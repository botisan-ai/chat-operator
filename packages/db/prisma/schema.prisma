generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  wechat        WechatApp[]
  wecom         WecomApp[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model KeyValueStorage {
  namespace String
  key       String
  value     String
  expires   Int?
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@unique([namespace, key])
  @@index([namespace])
  @@index([namespace, key])
}

model SessionStorage {
  id                    String    @id
  sourceType            RouteType
  sourceNamespaces      String
  destinationType       RouteType
  destinationNamespaces String
  createdAt             DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime  @default(now()) @db.Timestamptz(6)

  @@index([sourceType, sourceNamespaces])
  @@index([destinationType, destinationNamespaces])
}

model EventStorage {
  id            Int      @id @default(autoincrement())
  aggregateId   String
  aggregateType String
  version       Int
  eventType     String
  eventData     Json
  createdAt     DateTime @default(now()) @db.Timestamptz(6)

  @@index([aggregateId, aggregateType, version])
  @@index([aggregateId, aggregateType])
  @@index([aggregateId])
}

model RasaServer {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar
  url       String   @db.VarChar
  pingUrl   String?  @db.VarChar
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
}

model Route {
  id              Int       @id @default(autoincrement())
  sourceType      RouteType
  sourceName      String    @db.VarChar
  destinationType RouteType
  destinationName String    @db.VarChar
  isActive        Boolean   @default(false)
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @db.Timestamptz(6)

  @@unique([sourceType, sourceName, destinationType, destinationName])
  @@index([destinationName])
  @@index([sourceName])
  @@index([isActive])
  @@index([sourceType])
  @@index([destinationType])
}

model WechatApp {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar
  appId     String   @db.VarChar
  appSecret String   @db.VarChar
  token     String?  @db.VarChar
  aesKey    String?  @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)

  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model WecomApp {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar
  corpId     String   @db.VarChar
  corpSecret String   @db.VarChar
  token      String?  @db.VarChar
  aesKey     String?  @db.VarChar
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @db.Timestamptz(6)

  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model WxkfAccountLink {
  id          Int    @id @default(autoincrement())
  corpId      String @db.VarChar
  openKfId    String @db.VarChar
  scene       String @db.VarChar
  scene_param Json?  @db.Json
  url         String @unique @db.VarChar

  @@index([corpId, openKfId])
}

enum RouteType {
  Rasa
  WechatApp
  Wxkf
  Saga
}
